/*! \page page_installation Installation
    
    \tableofcontents
    
    \section installation_introduction Introduction
    
    PB3D is written in Fortran, and makes use of multiple numerical libraries:
        - <a href="http://www.netlib.org/lapack/">blas / lapack</a>
            - for basic linear algebra
        - <a href="http://www.netlib.org/scalapack/">pblas / blacs / scalapack</a>
            - for parallelized basic linear algebra
        - <a href="https://www.hdfgroup.org/HDF5/">HDF5</a>
            - for storage files
            - works in parallel
        - <a href="https://www.unidata.ucar.edu/software/netcdf/">NetCDF</a>
            - to read input of VMEC
            - sequential
        - <a href="https://www.mcs.anl.gov/petsc/">PETSc</a> / <a href="http://slepc.upv.es/">SLEPc</a>
            - for linear algebra of large, sparse matrices
            - can reach \f$\sim \mathcal{O} (n)\f$ complexity
            - Minimal installation instructions:
                -# Configure PETSc using
                    `./configure PETSC_ARCH=complex COPTFLAGS=-O3 CXXOPTFLAGS=-O3 FOPTFLAGS=-O3 \`<br/>
                    `--with-scalar-type=complex \`<br/>
                    `--download-metis \`<br/>
                    `--download-mumps \`<br/>
                    `--download-parmetis \`<br/>
                    `--with-scalapack-lib="-L[SCALAPCKDIR] -lscalapack" \`<br/>
                    `--with-valgrind-dir=/usr \`<br/>
                    `--with-debugging=no \`<br/>
                    `--with-fortran-kernels=1`<br/>
                  (If you want debug, remove `--with-debugging=no`, `--with-fortran-kernels=1`, COPTSFLAGS, CXXOPTFLAGS and FOPTFLAGS, and change PETSC_ARCH to `debug-complex`.)<br/>
                  (If you use a different HDF5, add `--with-hdf5-dir=[HDF5DIR]`.)
                -# follow instructions to do makes and tests.
                -# Set global variables `export SLEPC_DIR=[SLEPC DIR]`, `export PETSC_DIR=[PETSC_DIR]` and `export PETSC_ARCH=[debug-]complex` (depending on whether it is debug or not).
                -# Configure SLEPc using `./configure`
                -# follow instructions to do makes and tests
        - <a href="http://portal.nersc.gov/project/sparse/strumpack/">StrumPack</a>
            - for linear algebra of structured matrices \cite Ambikasaran2013
            - can reach \f$\sim \mathcal{O} (n \log(n))\f$ complexity
        - <a href="http://vmecwiki.pppl.wikispaces.net/STELLOPT+Compilation">libstell</a>
            - part of Stellopt suite, which contains VMEC
            - provides routines to read VMEC output data
        - <a href="https://w3.pppl.gov/ntcc/PSPLINE/">pspline</a>
            - Princeton Spline and Hermite Cubic Interpolation Routines
            - Minimal installation instructions:
                -# Export \c FFLAGS en \c CFLAGS if you want to optimize:
                    - copy `share/Make.overwrite.sample` to `share/Make.overwrite`
                    - Run the gmake below and note the flags, then edit these and put them in `share/Make.overwrite`
                    - if GCC:
                        - `FFLAGS = -c -O3 -m64 -fno-range-check -fdollar-ok -cpp ; export FFLAGS`
                        - `CFLAGS = -c -O3 -m64 ; export CFLAGS`
                        - `CXXFLAGS = -c -O3 -m64 ; export CXXFLAGS`
                    - if Intel:
                        - `FFLAGS = -c -O3 -nowarn -ftz -auto-scalar -traceback -align dcommons`
                        - `MPI_FFLAGS =  -c -O3 -nowarn  -ftz -traceback -align dcommons -auto-scalar`
                          (possibly add FC=mpiifort, \c CXX=mpicpc, \c CC=mpiicc if on a cluster)
                -# Compile with `gmake NETCDF_DIR= FORTRAN_VARIANT=[VARIANT]` with `[VARIANT]` either `GCC` or `Intel` (add `DEBUG=1` and remove the FLAGS if debug wanted). Possibly also add `OBJ=$[COMP_DIR]` if on a cluster, with `[COMP_DIR]` the directory where to put the resulting library.
                -# Run tests from \c README_Pspline.

    They should probably be installed in this order. On linux distributions such as Ubuntu, they may be available as packages.
    
    Furthermore, PB3D comes bundled with some other, smaller libraries:
        - <a href="http://www.netlib.org/fftpack/">fftpack</a>
            - to calculate the fast Fourier transform
        - <a href="http://foul.sourceforge.net/">foul</a>
            - the Fortran Output Library

    These do not have to be installed separately.
    
    \section installation_compilation Compilation
    
    When all dependencies are satisfied, the program is then compiled in the standard way:
        - Including the headers of all the libraries in the compilation of the object files:
            - This is done using <tt>-I[path_to_library]</tt>.
            - Make sure you add the <tt>-o</tt> option to create only object files.
        - Linking with the actual libraries
            - This is done using <tt>-L[path_to_library] -l[library_name]</tt>.
    
    \section installation_makefile Makefile Example

    \includelineno example.mk

    \note 
        -# PETSc and SLEPc don't like to be included in another makefile.
        The trick is to include two files:
        \snippetlineno example.mk PETSc and SLEPc trick
        which will load the variables  \c PETSC_FC_INCLUDES and \c SLEPC_INCLUDE, used in
        \snippetlineno example.mk PETSc and SLEPc trick inc
        as well as the variables \c PETSC_LIB and \c SLEPC_LIB, used in
        \snippetlineno example.mk PETSc and SLEPc trick lib
        -# There are versions of libstell that do not use the standard convention.
        In this case you have to look for the <tt>*.mod</tt> files.
        In the example makefile this is done with
        \snippetlineno example.mk Libstell special
        instead of the standard <tt>inc</tt> directory.
        -# In \snippetlineno example.mk PB3D include
        there are includefiles that contain macros and wrappers specifically for PB3D.
        -# In \snippetlineno example.mk PB3D libraries
        linking is done with external libraries that are bundled with PB3D.
    
    \example example.mk An example makefile:
*/

    PB3D can be obtained using git:
        \code 
        git clone https://ToonWeyens@bitbucket.org/ToonWeyens/pb3d.git
        \endcode
    
